version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      
      # CRITICAL: Ensure we have latest code
      - echo "Pulling latest code from main branch..."
      - git fetch origin main
      - git reset --hard origin/main
      - git pull origin main
      
      # Verify version
      - echo "Current version in code:"
      - grep -E "VERSION|DEPLOYMENT_TIMESTAMP" modules/core/config.py | head -5
      
  build:
    commands:
      - echo Build started on `date`
      - echo Building Docker image...
      # Set required build arguments for Dockerfile
      - export GITHUB_SHA=$CODEBUILD_RESOLVED_SOURCE_VERSION
      - export GITHUB_REF="refs/heads/main"
      - export BUILD_TIME=$(date +%s)
      # Force rebuild to ensure latest code with build args
      - docker build --no-cache --build-arg GITHUB_SHA=$GITHUB_SHA --build-arg GITHUB_REF=$GITHUB_REF --build-arg BUILD_TIME=$BUILD_TIME --build-arg CACHEBUST=$BUILD_TIME -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI:latest
      
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing Docker images to ECR...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      
      # CRITICAL: Update ECS service
      - echo "Updating ECS service to use new image..."
      - |
        aws ecs update-service \
          --cluster ava-olo-production \
          --service agricultural-core \
          --force-new-deployment \
          --region $AWS_DEFAULT_REGION \
          --output json
      
      - echo "Waiting 30 seconds for deployment to start..."
      - sleep 30
      
      # Check deployment status
      - |
        echo "Checking deployment status..."
        aws ecs describe-services \
          --cluster ava-olo-production \
          --services agricultural-core \
          --region $AWS_DEFAULT_REGION \
          --query 'services[0].deployments[0].{status:status,desired:desiredCount,running:runningCount,taskDef:taskDefinition}' \
          --output table
      
      # Optional: Wait for stable (with timeout to prevent hanging)
      - |
        echo "Waiting for service to stabilize (max 5 minutes)..."
        timeout 300 aws ecs wait services-stable \
          --cluster ava-olo-production \
          --services agricultural-core \
          --region $AWS_DEFAULT_REGION || echo "Service is still updating..."
      
      # Verify deployment
      - echo "Deployment initiated successfully!"
      - echo "New containers should be running in 2-3 minutes"
      
artifacts:
  files: 
    - '**/*'
  name: agricultural-core-build
