#!/usr/bin/env python3
"""
Environment Variables Recovery Script
Searches repository for existing values and generates new ones for missing
"""
import os
import re
import json
import secrets
import string
from datetime import datetime
from pathlib import Path

def search_for_env_values():
    """Search entire repository for environment values"""
    
    findings = {
        "database": {},
        "apis": {},
        "aws": {},
        "security": {},
        "files_searched": 0
    }
    
    # Search patterns
    patterns = {
        "db_host": r"farmer-crm-production\.([\w\-\.]+)\.rds\.amazonaws\.com",
        "db_name": r"DB_NAME['\"]?\s*[:=]\s*['\"]?(\w+)",
        "openai_key": r"(sk-[a-zA-Z0-9\-]+|OPENAI_API_KEY['\"]?\s*[:=]\s*['\"]?([^'\"]+))",
        "weather_key": r"OPENWEATHER_API_KEY['\"]?\s*[:=]\s*['\"]?([^'\"]+)",
        "aws_region": r"(us-east-1|eu-west-1)",
        "secret_key": r"SECRET_KEY['\"]?\s*[:=]\s*['\"]?([^'\"]+)"
    }
    
    # Search these file types
    search_extensions = ['.py', '.yml', '.yaml', '.env', '.json', '.md', '.txt', '.sh']
    
    # Known values from our search
    findings['database']['DB_HOST'] = 'farmer-crm-production.cifgmm0mqg5q.us-east-1.rds.amazonaws.com'
    findings['database']['DB_NAME'] = 'farmer_crm'
    findings['database']['DB_USER'] = 'postgres'
    findings['database']['DB_PORT'] = '5432'
    
    # AWS values we can infer
    findings['aws']['AWS_REGION'] = 'us-east-1'
    findings['aws']['AWS_DEFAULT_REGION'] = 'us-east-1'
    
    # App config we know
    findings['aws']['ENVIRONMENT'] = 'production'
    findings['aws']['DEBUG'] = 'false'
    findings['aws']['LOG_LEVEL'] = 'INFO'
    
    # Search for any additional values
    for root, dirs, files in os.walk('.'):
        # Skip these directories
        if any(skip in root for skip in ['.git', '__pycache__', 'node_modules', 'venv']):
            continue
            
        for file in files:
            if any(file.endswith(ext) for ext in search_extensions):
                findings['files_searched'] += 1
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                        # Search for OpenAI keys
                        if 'sk-' in content and 'openai' in content.lower():
                            matches = re.findall(r'sk-[a-zA-Z0-9\-]+', content)
                            if matches:
                                findings['apis']['possible_openai_keys'] = matches[:3]  # First 3 matches
                                
                except Exception as e:
                    continue
    
    return findings

def generate_secure_values():
    """Generate new secure values for missing env vars"""
    
    def generate_secret_key(length=32):
        """Generate a secure random string"""
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(length))
    
    def generate_password(length=16):
        """Generate a secure password with special chars"""
        alphabet = string.ascii_letters + string.digits + "!@#$%"
        password = ''.join(secrets.choice(alphabet) for _ in range(length-3))
        # Ensure it has uppercase, lowercase, digit and special char
        password += 'Aa1!'
        return password
    
    new_values = {
        'SECRET_KEY': generate_secret_key(32),
        'JWT_SECRET_KEY': generate_secret_key(32),
        'DB_PASSWORD_SUGGESTION': generate_password(16),
    }
    
    return new_values

def create_recovery_report():
    """Generate comprehensive report of found and needed values"""
    
    print("=== ENVIRONMENT VARIABLES RECOVERY REPORT ===")
    print(f"Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    # Search repository
    found_values = search_for_env_values()
    print(f"Files searched: {found_values['files_searched']}")
    
    # Generate new values
    new_values = generate_secure_values()
    
    # Create .env.production file
    env_file_path = '.env.production'
    with open(env_file_path, 'w') as f:
        f.write("# AVA OLO Production Environment Variables\n")
        f.write(f"# Generated by recovery script at {datetime.now()}\n")
        f.write("# IMPORTANT: Replace placeholder values with real ones!\n\n")
        
        f.write("# === DATABASE CONFIGURATION (RECOVERED) ===\n")
        f.write(f"DB_HOST={found_values['database']['DB_HOST']}\n")
        f.write(f"DB_NAME={found_values['database']['DB_NAME']}\n")
        f.write(f"DB_USER={found_values['database']['DB_USER']}\n")
        f.write(f"DB_PORT={found_values['database']['DB_PORT']}\n")
        f.write(f"# Database password - YOU MUST SET THIS!\n")
        f.write(f"DB_PASSWORD={new_values['DB_PASSWORD_SUGGESTION']}  # CHANGE THIS!\n\n")
        
        # Build DATABASE_URL
        db_url = f"postgresql://{found_values['database']['DB_USER']}:{new_values['DB_PASSWORD_SUGGESTION']}@{found_values['database']['DB_HOST']}:{found_values['database']['DB_PORT']}/{found_values['database']['DB_NAME']}"
        f.write(f"# Alternative: Full connection string\n")
        f.write(f"DATABASE_URL={db_url}\n\n")
        
        f.write("# === API KEYS (NEED TO BE OBTAINED) ===\n")
        f.write("# Get from: https://platform.openai.com/api-keys\n")
        f.write("OPENAI_API_KEY=sk-proj-REPLACE_WITH_YOUR_KEY\n\n")
        
        f.write("# Get from: https://openweathermap.org/api\n")
        f.write("OPENWEATHER_API_KEY=REPLACE_WITH_YOUR_KEY\n\n")
        
        f.write("# === SECURITY KEYS (GENERATED - KEEP THESE!) ===\n")
        f.write(f"SECRET_KEY={new_values['SECRET_KEY']}\n")
        f.write(f"JWT_SECRET_KEY={new_values['JWT_SECRET_KEY']}\n\n")
        
        f.write("# === AWS CONFIGURATION (RECOVERED) ===\n")
        f.write(f"AWS_REGION={found_values['aws']['AWS_REGION']}\n")
        f.write(f"AWS_DEFAULT_REGION={found_values['aws']['AWS_DEFAULT_REGION']}\n")
        f.write("AWS_EXECUTION_ENV=AWS_ECS_EC2\n\n")
        
        f.write("# === APP CONFIGURATION (RECOVERED) ===\n")
        f.write(f"ENVIRONMENT={found_values['aws']['ENVIRONMENT']}\n")
        f.write(f"DEBUG={found_values['aws']['DEBUG']}\n")
        f.write(f"LOG_LEVEL={found_values['aws']['LOG_LEVEL']}\n")
    
    print(f"\n‚úÖ Created {env_file_path}")
    
    # Create JSON version for ECS
    env_json = []
    with open(env_file_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                # Skip comments in value
                if '#' in value:
                    value = value.split('#')[0].strip()
                env_json.append({"name": key, "value": value})
    
    with open('ecs-env-vars.json', 'w') as f:
        json.dump(env_json, f, indent=2)
    
    print("‚úÖ Created ecs-env-vars.json for ECS task definitions")
    
    # Summary report
    print("\n=== RECOVERY SUMMARY ===")
    print("\nüìÅ RECOVERED FROM REPOSITORY:")
    print(f"  - DB_HOST: {found_values['database']['DB_HOST']}")
    print(f"  - DB_NAME: {found_values['database']['DB_NAME']}")
    print(f"  - DB_USER: {found_values['database']['DB_USER']}")
    print(f"  - AWS_REGION: {found_values['aws']['AWS_REGION']}")
    
    print("\nüîê GENERATED NEW SECURE VALUES:")
    print(f"  - SECRET_KEY: {new_values['SECRET_KEY'][:10]}... (32 chars)")
    print(f"  - JWT_SECRET_KEY: {new_values['JWT_SECRET_KEY'][:10]}... (32 chars)")
    print(f"  - DB_PASSWORD_SUGGESTION: {new_values['DB_PASSWORD_SUGGESTION'][:4]}****")
    
    print("\n‚ùó STILL NEEDED FROM YOU:")
    print("  1. DB_PASSWORD - Set the actual database password")
    print("  2. OPENAI_API_KEY - Get from OpenAI dashboard")
    print("  3. OPENWEATHER_API_KEY - Get from OpenWeatherMap")
    
    print("\nüìã NEXT STEPS:")
    print("  1. Edit .env.production with your actual values")
    print("  2. Run: ./scripts/update_ecs_env.sh")
    print("  3. Update ECS services in AWS console")
    print("  4. Verify with: /api/v1/system/env-check")
    
    return {
        'env_file': env_file_path,
        'json_file': 'ecs-env-vars.json',
        'found_values': found_values,
        'generated_values': new_values
    }

if __name__ == "__main__":
    result = create_recovery_report()
    print("\n‚úÖ Recovery complete!")
    print(f"   Files created: {result['env_file']}, {result['json_file']}")