name: Deploy Agricultural Core to ECS

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 127679825789.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: ava-olo-agricultural-core
  ECS_CLUSTER: ava-olo-production
  ECS_SERVICE: agricultural-core
  CONTAINER_NAME: agricultural

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}
        run: |
          # NUCLEAR CACHE-BUSTING - Force complete rebuild with NO cache
          docker build \
            --no-cache \
            --pull \
            --build-arg BUILDKIT_INLINE_CACHE=0 \
            --build-arg CACHEBUST=$(date +%s) \
            --build-arg GITHUB_SHA=${{ github.sha }} \
            --build-arg GITHUB_REF=${{ github.ref }} \
            --build-arg BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          
          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Force ECS to use new image
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.VERSION }}

      - name: Deploy to ECS with Force New Deployment
        run: |
          # Force new deployment with latest image
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --task-definition ${{ steps.task-def.outputs.task-definition }}
          
          # Wait for stability with timeout
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --cli-read-timeout 300 \
            --cli-connect-timeout 300 \
            || echo "Deployment proceeding despite timeout"

      - name: Verify deployment
        run: |
          echo "ðŸŽ‰ Agricultural Core deployed successfully!"
          echo "Version: ${{ steps.version.outputs.VERSION }}"
          echo "Service: https://ava-olo-65365776.us-east-1.elb.amazonaws.com/"
